{"ast":null,"code":"const FIREBASE_DOMAIN = 'https://quotes-11072-default-rtdb.firebaseio.com';\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  await getAllQuotes();\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}","map":{"version":3,"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"sources":["C:/Users/Anastasia/Desktop/My progects/react-router/src/lib/api.js"],"sourcesContent":["const FIREBASE_DOMAIN = 'https://quotes-11072-default-rtdb.firebaseio.com';\r\n\r\nexport async function getAllQuotes() {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not fetch quotes.');\r\n    }\r\n\r\n    const transformedQuotes = [];\r\n\r\n    for (const key in data) {\r\n        const quoteObj = {\r\n            id: key,\r\n            ...data[key],\r\n        };\r\n\r\n        transformedQuotes.push(quoteObj);\r\n    }\r\n\r\n    return transformedQuotes;\r\n}\r\n\r\nexport async function getSingleQuote(quoteId) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not fetch quote.');\r\n    }\r\n\r\n    const loadedQuote = {\r\n        id: quoteId,\r\n        ...data,\r\n    };\r\n\r\n    return loadedQuote;\r\n}\r\n\r\nexport async function addQuote(quoteData) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(quoteData),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not create quote.');\r\n    }\r\n   await getAllQuotes()\r\n\r\n    return null;\r\n}\r\n\r\nexport async function addComment(requestData) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestData.commentData),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not add comment.');\r\n    }\r\n\r\n    return { commentId: data.name };\r\n}\r\n\r\nexport async function getAllComments(quoteId) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not get comments.');\r\n    }\r\n\r\n    const transformedComments = [];\r\n\r\n    for (const key in data) {\r\n        const commentObj = {\r\n            id: key,\r\n            ...data[key],\r\n        };\r\n\r\n        transformedComments.push(commentObj);\r\n    }\r\n\r\n    return transformedComments;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}